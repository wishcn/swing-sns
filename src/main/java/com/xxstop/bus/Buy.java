package com.xxstop.bus;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.xxstop.bus.data.*;
import com.xxstop.component.DesktopPush;
import com.xxstop.component.SystemTray;
import com.xxstop.component.ValidCodeCom;
import com.xxstop.exception.AppException;
import com.xxstop.util.XMessage;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by xxstop on 14-9-19.
 */
public class Buy {
    private JTextField validCodeText;
    private JButton submit;
    private JLabel validCode;
    private JLabel validCodeImg;
    private JPanel fields;
    private JPanel buttons;
    private JPanel container;
    private JPanel showMsg;
    private JLabel tips;
    private JFrame jFrame;

    public Buy() {
        try {
            new Cookie().setCookie();
            validCodeImg.setIcon(new ValidCode().get());
        } catch (AppException e) {
            e.printStackTrace();
            XMessage.error(tips, e.getMessage());
        }

        submit.addMouseListener(new SubmitMonitor());
        validCodeImg.addMouseListener(new ValidCodeMonitor());
    }

    public void launchFrame() {
        jFrame = new JFrame("BuyBuyBuy");
        jFrame.setContentPane(this.container);
        jFrame.setLocationRelativeTo(null);
        jFrame.pack();
        jFrame.setVisible(true);

        new SystemTray(jFrame).show();
    }

    public static void main(String[] args) {
        new Buy().launchFrame();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        container = new JPanel();
        container.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1));
        container.setFont(new Font("Source Code Pro", container.getFont().getStyle(), container.getFont().getSize()));
        fields = new JPanel();
        fields.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        container.add(fields, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        validCode = new JLabel();
        validCode.setText("VC");
        fields.add(validCode, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        validCodeText = new JTextField();
        fields.add(validCodeText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        validCodeImg = new JLabel();
        validCodeImg.setText(" ");
        fields.add(validCodeImg, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttons = new JPanel();
        buttons.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        container.add(buttons, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        buttons.add(spacer1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        submit = new JButton();
        submit.setText("submit");
        buttons.add(submit, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        buttons.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        buttons.add(spacer3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        showMsg = new JPanel();
        showMsg.setLayout(new FormLayout("fill:d:noGrow", "center:d:grow"));
        container.add(showMsg, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tips = new JLabel();
        tips.setText(" ");
        CellConstraints cc = new CellConstraints();
        showMsg.add(tips, cc.xy(1, 1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return container;
    }

    private class ValidCodeMonitor extends MouseAdapter {
        @Override
        public void mouseClicked(MouseEvent me) {
            try {
                validCodeImg.setIcon(new ValidCode().get());
                new ValidCodeCom().show(tips);
            } catch (AppException e1) {
                e1.printStackTrace();
                XMessage.error(tips, e1.getMessage());
            }
        }
    }

    private class SubmitMonitor extends MouseAdapter {
        @Override
        public void mouseClicked(MouseEvent me) {
            if (!submit.isEnabled()) {
                return;
            }

            if (validCodeText.getText().equals("")) {
                XMessage.error(tips, "Please fill in the VC!");
                return;
            }
            submit.setEnabled(false);
            XMessage.clear(tips);
            new netThread().start();
        }
    }

    private class netThread extends Thread {
        @Override
        public void run() {
            Ticket ticket = new Ticket();
            User user = new User();
            boolean isPush = true;

            while (true) {
                try {
                    if (!User.isLogined()) {
                        // - 用户登录
                        submit.setText("Login...");
                        user.login("13888888885", "123456", validCodeText.getText());
                        User.setLogined(true);
                    }
                    // - 查询票
                    submit.setText("Querying...");
                    ArrayList list = ticket.query();
                    if (isPush) {
                        submit.setText("Pushing...");
                        String content = ticket.toEmail(list);
                        System.out.println(content);
                        // - 进行桌面级推送
                        new Thread(new DesktopPush(0, "Ticket is Exist!", content)).start();
                        // - 进行邮件推送
                        new Email().send("13648385235@qq.com", content);
                    } else {
                        // - 进行下订单的流程 TODO : 由于过程过于复杂，暂时不写
                        submit.setText("Buying...");
                        // - 下订单
                        ticket.order((HashMap) list.get(0));
                        // - 购买
                        ticket.buy(user.getUser());
                    }
                    submit.setText("submit");
                    submit.setEnabled(true);
                    break;
                } catch (AppException e) {
                    e.printStackTrace();
                    XMessage.error(tips, e.getMessage());
                    try {
                        submit.setText("Sleeping...");
                        sleep(1000 * 60 * 7);
                    } catch (InterruptedException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        }
    }
}
